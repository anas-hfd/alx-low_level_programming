!<arch>
0-isupper.c/    0           0     0     644     226       `
#include "main.h"
/**
 * _isupper - checks for uppercase letters
 * @c: the character to be checked
 * Return: if upper 1 if lower 0
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
		return (0);
}
0-memset.c/     0           0     0     644     276       `
#include "main.h"
/**
 * _memset - sets a constant in memory
 * @s: pointer to char
 * @b: char
 * @n: unsigned int
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;

	while (n-- > 0)
	{
		*p++ = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     370       `
#include "main.h"
#include <string.h>
/**
 *_strcat - Concatenates strings
 *@src: the source
 *@dest: the destination
 * Return: a pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int l = 0;

	while (dest[l] != '\0')
	{
		l++;
	}
	for (i = 0; src[i] != 0; i++)
	{
		dest[l] = src[i];
		l++;
	}
	dest[l] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     407       `
#include "main.h"

/**
 * _atoi - Convert  str to an int
 * @s:pointer
 *
 * Return: int
 */
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}

		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}

		if (isi == 1)
		{
			break;
		}

		c++;
	}

	ni *= min;
	return (ni);
}

1-isdigit.c/    0           0     0     644     222       `
#include "main.h"
/**
 * _isdigit - 0-9 digits checker
 * @c: the number to be checked
 * Return: 1 if c is a digit otherwise 0
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     293       `
#include "main.h"

/**
 * _memcpy - memory copy
 * @dest: pointer to destination
 * @src: pointer to source
 * @n: unsigned int
 * Return: a pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *p = dest;

	while (n-- > 0)
	{
		*dest++ = *src++;
	}
	return (p);
}

1-strncat.c/    0           0     0     644     433       `
#include "main.h"
/**
 *_strncat - concatenates two strings
 *@dest: destination string
 *@src: source string
 *@n: numb of elements
 *Return: pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	for (i = 0; dest[i] != '\0'; i++)
	{
		if (dest[i + 1] == '\0')
		{
			for (j = 0; src[j] != '\0' && j < n; j++)
			{
				dest[i + 1] = src[j];
				i++;
			}
		}
	}

	return (dest);
}

2-strchr.c/     0           0     0     644     296       `
#include "main.h"
#include <stddef.h>
/**
 * _strchr - locate a char in a string
 * @s: char
 * @c: char
 * Return: s or NULL
 */
char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s != c)
		{
			s++;
		}
		else
		{
			return (s);
		}
	}
	if (c == '\0')
	{
		return (s);
	}
	return (NULL);
}
2-strlen.c/     0           0     0     644     162       `
#include "main.h"
#include <string.h>
/**
 * _strlen - shows the lenth of a string
 * @s: string
 * Return: int
 */
int _strlen(char *s)
{
	return (strlen(s));
}
2-strncpy.c/    0           0     0     644     331       `
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: destination string
 * @src: source string
 * @n: n of elements
 * Return: char
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	while (i < n)
	{
		dest[i++] = '\0';
	}
	return (dest);

}

3-islower.c/    0           0     0     644     212       `
#include "main.h"
/**
 *_islower - lowercase function
 *@c: charachter
 * Return: 1 for lowercase, otherwise 0
 */
int _islower(int c)
{
	if (c <= 122 && c >= 97)
	{
		return (1);
	}
	else
	{
		return (0);
	}

}
3-puts.c/       0           0     0     644     171       `
#include "main.h"
/**
 * _puts - func to print
 * @str: string
 * Return: void
 */
void _puts(char *str)
{
	while (*str)
	{
	_putchar(*str);
	str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     239       `
#include "main.h"
/**
 * _strcmp - compairing two str
 * @s1: char
 * @s2: char
 * Return: int
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*(unsigned char *)s1 - *(unsigned char *)s2);
}

3-strspn.c/     0           0     0     644     421       `
#include "main.h"
/**
 * _strspn - gets the lenth of a prefix
 * @s: pointer to s
 * @accept: pointer to accept
 * Return: number of bytes
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int count = 0;

	while (*s != '\0')
	{
		char *c = accept;

		while (*c != '\0')
		{
			if (*s == *c)
			{
				count++;
				break;
			}
			c++;
		}
		if (*c == '\0')
		{
			return (count);
		}
		s++;
	}
	return (count);
}

4-isalpha.c/    0           0     0     644     264       `
#include "main.h"
/**
 * _isalpha - alphabet chacker
 * @c: character
 * Return: 1 if c is alphabet, otherwise 0
 */

int _isalpha(int c)
{
	if (c <= 90 && c >= 65)
	{
		return (1);
	}
	else if (c <= 122 && c >= 97)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     411       `
#include "main.h"
#include <stddef.h>

/**
 * _strpbrk - searches a string for any of a set of bytes
 *@s: pointer to the string
 *@accept: pointer to the string
 *
 *Return: pointer to the byte in s
 */
char *_strpbrk(char *s, char *accept)
{
	char *p = s;

	while (*p != '\0')
	{
		char *c = accept;

		while (*c != '\0')
		{
			if (*c == *p)
			{
				return (p);
			}
			c++;
		}
		p++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     468       `
#include "main.h"
#include <stddef.h>
/**
 * _strstr - locates a substing
 * @haystack: string
 * @needle: string
 * Return: ptr to the beggining of substrng
 */
char *_strstr(char *haystack, char *needle)
{
	if (*needle == '\0')
	{
		return (haystack);
	}
	for (; *haystack != '\0'; haystack++)
	{
		char *h = haystack;
		char *n = needle;

		while (*n != '\0' && *n == *h)
		{
			n++;
			h++;
		}
		if (*n == '\0')
		{
			return (haystack);
		}
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     234       `
#include "main.h"

/**
 * _abs - sets the absolute value of a number
 * @n: number
 * Return: if n is pos ret n if negative ret abs
 */

int _abs(int n)
{
	if (n < 0)
	{
		int abs;

		abs = n * (-1);
		return (abs);
	}
	return (n);
}
9-strcpy.c/     0           0     0     644     291       `
#include "main.h"
#include <string.h>
/**
 * _strcpy - copy string
 * @src: the source string
 * @dest: the destination string
 * Return: char
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
	dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}

main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

